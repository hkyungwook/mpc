\documentclass{article}
\usepackage{psfrag}
\usepackage{epsfig}
\usepackage{alltt}
\usepackage{pstricks,pst-node,pst-tree}
\usepackage{amsmath,amsfonts,amssymb}
\usepackage{fullpage}

\input{macros}
\begin{document}


\section{Using Our Solution}
One can use our implementation (an executable program) with ease by
providing three files that contain configuration, actual data, and the
binary circuit representing the output function $f$.

\subsection{Compilation}
In Windows environment, we provide a solution file for Visual Studio
2008/2010. In Linux environment, we provide a Makefile.

\subsection{Configuration}

Figure \ref{fig:config} describes the configuration for two-party
case. The configuration file for the provider (resp., the customer) is
inputp.txt (resp., inputc.txt).

\begin{figure}[b]
\small

\begin{minipage}[t]{0.35\textwidth}
In {\tt configp.txt}:
\begin{alltt}
num_parties 	2
pid				0
address-book	addresses.txt
circuit			circ.bin
input inputp.txt
num_input 5000
seed 11323434087201
p 893609795...799235731486130087
g 766091584...167705188057761352
\end{alltt}%
\end{minipage}
~~~~
\begin{minipage}[t]{0.35\textwidth}
In {\tt configc.txt}:
\begin{alltt}
num_parties 	2
pid				1
address-book	addresses.txt
circuit			circ.bin
input inputc.txt
num_input 5000
seed 39347104378941
p 893609795...799235731486130087
g 766091584...167705188057761352
\end{alltt}%
\end{minipage}
~~~
\begin{minipage}[t]{0.25\textwidth}
In {\tt addresses.txt}:
\begin{alltt}
0	192.168.1.4	7766
1	192.168.1.5 7767
\end{alltt}
\end{minipage}

\caption{Configuration Example}
\label{fig:config}
\end{figure}

The meaning of the fields is straightforward but explained in the
following to be complete:
\begin{itemize}
\item
{\tt num\_parties}:
It represents the number of parties participating in the protocol
\item
{\tt pid}:
It represents the identifier of the participating party. The id starts
from $0$, and the customer must have the last id (i.e.,
num\_parties-1).
\item
{\tt address-book}:
It represents the name of the file that contains the addresses of the
parties. Each address in the file is of a form (pid, ip-address,
port).
\item
{\tt input}:
An input file that contains the party's input values (such as resource
values, or 0/1 indicating interests in each resource)
\item
{\tt num\_input}:
The number of the party's input values (from the above input file on
{\tt input} field) to input to the implementation
\item
{\tt circuit}:
The name of the file that contains the circuit representing a function 
to be computed.
\item
{\tt create-circuit}: Instead of specifying a circuit file on {\tt circuit} field,
one can also build a circuit with a source-code level with minimal modification 
on the source code. See Sec. \ref{subsec:default_circuits} and \ref{subsec:source_code}
\item
{\tt seed}:
It represents a random seed necessary for SHA-1.
\item
{\tt p}:
It is a safe prime number to be used in the oblivious transfer. It must be the
same among all the parties. We recommend $p$ to be at least $512$ bits
long.
\item
{\tt g}:
It is a generator of the subgroup $QR(\ZZ_p^*)$. It must be the same
among all the parties.
\end{itemize}


\subsection{Providing input}
The input is provided via the input file given in the configuration (on {\tt input} field).
The formation can be any form depending on the circuit that is to
be computed (the circuit descriptions are in Sec. \ref{sec:circuits}).
The following is an example of a Boolean format:
%
\begin{alltt}
\small
1 0 1 0 1 1 1 ...
\end{alltt}
%
Each input value is divided by a single-column space, and the number
of inputs in the input file should be at least as many as the number
given in {\tt num\_input} field of the configuration.


\subsection{Running the program}
Using our implementation is simple.  Following the example in the
Figure \ref{fig:config}, the provider will run:
\begin{alltt}
>mpc.exe configp.txt
\end{alltt}
Similarly, the customer will run:
\begin{alltt}
>mpc.exe configc.txt
\end{alltt}


\begin{figure}[t!]
\small \centering \pstree[nodesep=1pt,levelsep=4ex]{ \TR{} } {
\pstree[nodesep=1pt,levelsep=10ex]{\TR{$\oplus$} \tlput{7}}{
    {
        \pstree{ \TR{$\odot$} \tlput{5}}{
            \TR{$P_1$} \tlput{2}
            \TR{$P_2$} \trput{4}}
        }
        \pstree{ \TR{$\oplus$} \trput{6}}{
            \TR{0} \tlput{0}
            \TR{$P_2$} \trput{3}
        }
    }
}
%
~~~~~~~~~~~~~~~~~~~~~~~~~
\begin{minipage}[t]{0.13\textwidth}
\small
\begin{alltt}
n 2
d 7 5 2
i 0 2 2
i 1 3 4
o 0 1 0
o 1 7 7
v 0 1
v 1 1
g 0 0 -1 -1 0
g 1 0 -1 -1 0
g 2 0 -1 -1 1 5
g 3 0 -1 -1 1 6
g 4 0 -1 -1 1 5
g 5 1 2 4 1 7
g 6 2 0 3 1 7
g 7 2 5 6 0
\end{alltt}
\end{minipage}
\caption{Circuit Example} \label{fig:circuitdes}
\end{figure}

\section{Providing Circuits}\label{sec:circuits}
\subsection{Circuit as a file}

One can use our implementation with ease by providing three files that
contain configuration, actual input, and the Boolean circuit
representing the function $f$ of interest.
%
A circuit may be described as a file using the fields below. We show
an example circuit in Figure \ref{fig:circuitdes}.
\begin{itemize}
\item
{\tt n}:
It represents the number of parties participating in the protocol.
\item
{\tt d}:
It represents the overall description of the circuit:  the total
number of wires in the circuit, the id $w$ of the first non-input
wire, and the number of XOR gates in the circuit. The wires before $w$
are considered as input wires.
\item
{\tt i}:
It describes the input part of a party in the circuit: party id, the
wire id of the first input of the party, and of the last.
\item
{\tt o}:
It describes the output part of a party in the circuit: party id, the
wire id of the first output of the party, and of the last. If a party
has no output, the last wire id should be smaller than the first. In
Figure \ref{fig:circuitdes}, only the second party $P_1$ has an output
for wire $7$.
\item
{\tt v}:
It describes the party id and the number of bits that each item in the
input file represents. Since this value is set to 1 in Figure
\ref{fig:circuitdes}, the MPC engine will read data from the input
file and  treat each tokenized value as a $1$-bit integer when feeding
this input values to the circuit.
\item
{\tt g}:
It represents the gate. The id of each gate is the id of the output
wire of the gate.  The values to be specified are the gate id, the
gate type, the left-input wire id, the right-input wire id, the number
of parents (i.e., gates that take the output of this
gate as input ).  The gate type can be either input ($0$), AND ($1$),
XOR ($2$). If the number of parents of the given gate is non-zero, the
ids of the parents are listed.   Note that the first two gates are
reserved for constant $0$ and $1$; the circuit file should follow this
rule.
\end{itemize}


\bheader{Converting the text file into a binary one}
To improve performance by avoiding parsing overhead, our MPC
implementation recognizes only the binary file. Conversion can be done
as follows:
\begin{alltt}
>mpc.exe -c circ.txt circ.bin
\end{alltt}

\subsection{Default circuits}\label{subsec:default_circuits}
The following default circuits are embedded in the source code.
To test these circuits, one should specify {\tt create-circuit} field in
the configuration. There are currently three circuits we provide whose names
are {\tt p2p}, {\tt cloud}, and {\tt social-net}, respectively.

\bheader{Circuit description for {\tt p2p}}
The circuit considers the case where a single customer $P_{n+1}$
interacts with a set of providers $\P = \{P_1, P_2, \ldots, P_n\}$.
Each provider $P_i$ holds (private) input $x_i$, and the customer
holds (private) input $x_{n+1}$.  The customer will compute $f(x_1,
\ldots, x_n, x_{n+1})$.
%
The input of each provider $P_i$ is a vector of resource values $x_i =
\{v_r\}_{r \in R_i}$, where $R_i = [(i-1)k+1, ik]$ ($k$ is specified
as {\tt num\_input} in the configuration file).
%
The input of the customer is the vector  $ x_{n+1} = (b_1, \ldots,
b_{nk})$ where $b_i \in \zo$ for $i \in [1,nk]$.
%
Let $i_r = v_r b_r$. The output of the circuit is a resource $r$
maximizing $i_r$.

To test {\tt p2p} circuit, one should specify {\tt create-circuit} field in 
the configuration of every party. One example is as follows:
\begin{alltt}
create-circuit p2p 2500 65535
\end{alltt}
The first argument indicates the name of the circuit to test, and the 
second is the number of resources each provider inputs, corresponding to $k$.
The third argument indicates that the range for each input value is 0 $\sim$ 65535. 
This third argument is required to decide the number of bits to represent 
each input value. In this example, every input from the parties is represented 
by 16 bits. 

\bheader{Saving the default circuit into files}
The default circuit can be save as a text file:
\begin{alltt}
>mpc.exe config.txt -t circ.txt
\end{alltt}
Also, one can get a binary circuit file.
\begin{alltt}
>mpc.exe config.txt -b circ.bin
\end{alltt}

\subsection{Modifying the source code}\label{subsec:source_code}
If the size of a circuit becomes more than $10^6$, loading the circuit
from a file takes much longer than creating it directly within the
program.  To achieve higher performance, one can also customize the
circuit with a source-code level with minimal modification; the MPC
engine in our implementation refers to circuits via an abstract C++
interface. To build a circuit on the source code, follow the next steps:

\begin{enumerate}

\end{enumerate}


\end{document}
